{"version":3,"sources":["utils.js","services/persons.js","components/Control.js","components/PersonsForm.js","components/Person.js","components/Persons.js","components/Notification.js","App.js","index.js"],"names":["isFunction","arg","withValue","callback","value","target","resolveData","data","Control","label","handler","onChange","PersonsForm","onSubmit","map","control","key","type","Person","id","name","number","deletePerson","onClick","Persons","persons","criteria","person","toLowerCase","includes","meets","renderPerson","NOTIFICATION_STATES","Notification","message","state","className","App","useState","setPersons","newName","setNewName","newNumber","setNewNumber","setCriteria","notificationMessage","setNotificationMessage","notificationState","setNotificationState","cleanUpMessageTimeoutId","setCleanUpMessageTimeoutId","clearFields","clearMessage","scheduleMessageCleanUp","delay","window","setTimeout","notify","clearTimeout","resolvePersons","items","useEffect","axios","then","controlsData","alert","existingPerson","find","confirm","put","update","updatedPerson","updatedPersons","reduce","acc","catch","reason","console","error","serverError","response","filteredPersons","filter","post","create","newPerson","event","preventDefault","Error","personId","personName","delete","finally","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.cf910d2b.chunk.js","sourcesContent":["const isFunction = arg => typeof arg === 'function'\n\nexport const withValue = callback => ({ target: { value } }) => isFunction(callback) && callback(value)\n\nexport const preventify = callback => event => {\n  event.preventDefault()\n\n  if (!isFunction(callback)) {\n    throw new Error('Callback is not valid')\n  }\n\n  callback()\n}\n","import axios from 'axios'\n\nconst BASE_URL = '/api/persons'\n\nconst resolveData = ({ data }) => data\n\nconst fetchAll = () => axios(BASE_URL).then(resolveData)\n\nconst create = (name, number) => axios.post(BASE_URL, { name, number }).then(resolveData)\n\nconst update = (id, data) => axios.put(`${BASE_URL}/${id}`, data).then(resolveData)\n\nconst remove = id => axios.delete(`${BASE_URL}/${id}`)\n\nexport {\n  fetchAll,\n  create,\n  update,\n  remove,\n}\n","import React from 'react'\n\nconst Control = ({\n  label,\n  value,\n  handler,\n}) => (\n  <div>\n    {label}: <input value={value} onChange={handler} />\n  </div>\n)\n\nexport default Control\n","import React from 'react'\n\nimport Control from './Control'\n\nconst PersonsForm = ({ data, handler }) => (\n  <form onSubmit={handler}>\n    {data.map(control => <Control key={control.label} {...control} />)}\n    <div>\n      <button type=\"submit\">add</button>\n    </div>\n  </form>\n)\n\nexport default PersonsForm\n","import React from 'react'\n\nconst Person = ({ id, name, number, deletePerson }) => (\n  <p>{name} {number} <button onClick={() => deletePerson(id, name)}>delete</button></p>\n)\n\nexport default Person\n","import React from 'react'\n\nimport Person from './Person'\n\nconst meets = criteria => name => !criteria || name.toLowerCase().includes(criteria)\n\nconst renderPerson = (criteria, deletePerson) => person => meets(criteria)(person.name) && (\n  <Person\n    key={person.id}\n    deletePerson={deletePerson}\n    {...person}\n  />\n)\n\nconst Persons = ({ persons, criteria, deletePerson }) => persons.map(renderPerson(criteria, deletePerson))\n\nexport default Persons\n","import React from 'react'\n\nexport const NOTIFICATION_STATES = {\n  ERROR: 'error',\n  SUCCESS: 'success',\n}\n\nexport const Notification = ({ message, state }) => message && (\n  <div className={`notification-box notification-box__${state}`}>\n    {message}\n  </div>\n)\n","import React, { useState, useEffect } from 'react'\n\nimport { withValue, preventify } from './utils'\nimport {\n  fetchAll,\n  create,\n  update,\n  remove,\n} from './services/persons'\nimport PersonsForm from './components/PersonsForm'\nimport Control from './components/Control'\nimport Persons from './components/Persons'\nimport { Notification, NOTIFICATION_STATES } from './components/Notification'\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [criteria, setCriteria] = useState('')\n  const [notificationMessage, setNotificationMessage] = useState('')\n  const [notificationState, setNotificationState] = useState('')\n  const [cleanUpMessageTimeoutId, setCleanUpMessageTimeoutId] = useState(null)\n\n  const clearFields = () => {\n    setNewName('')\n    setNewNumber('')\n  }\n\n  const clearMessage = () => {\n    setNotificationMessage('')\n    setNotificationState('')\n  }\n\n  const scheduleMessageCleanUp = delay => window.setTimeout(clearMessage, delay)\n\n  const notify = ({ message, state }) => {\n    window.clearTimeout(cleanUpMessageTimeoutId)\n    setNotificationMessage(message)\n    setNotificationState(state)\n    setCleanUpMessageTimeoutId(\n      scheduleMessageCleanUp(5000)\n    )\n  }\n  const resolvePersons = items => setPersons(items)\n\n  const fetchPersons = () => {\n    fetchAll().then(resolvePersons)\n\n    return window.clearTimeout(cleanUpMessageTimeoutId)\n  }\n\n  useEffect(fetchPersons, [])\n\n  const controlsData = [{\n    label: 'name',\n    value: newName,\n    handler: withValue(setNewName),\n  }, {\n    label: 'number',\n    value: newNumber,\n    handler: withValue(setNewNumber),\n  }]\n\n  const addPerson = () => {\n    if (!newName || !newNumber) {\n      return window.alert('All fields are required')\n    }\n\n    const isExisting = ({ name }) => name === newName\n    const existingPerson = persons.find(isExisting)\n\n    if (existingPerson) {\n      const shouldReplace = window.confirm(`${newName} has already been added to the phonebook, replace the old number with the new one?`)\n\n      if (shouldReplace) {\n        const { id, name } = existingPerson\n\n        return update(id, { ...existingPerson, number: newNumber }).then(updatedPerson => {\n          const accumulatePersons = (acc, person) => {\n            if (person.id === updatedPerson.id) {\n              return [...acc, updatedPerson]\n            }\n\n            return [...acc, person]\n          }\n\n          const updatedPersons = persons.reduce(accumulatePersons, [])\n\n          clearFields()\n          setPersons(updatedPersons)\n          setNotificationMessage(`Updated ${updatedPerson.name}'s number`)\n          setNotificationState(NOTIFICATION_STATES.SUCCESS)\n          scheduleMessageCleanUp(5000)\n        }).catch(reason => {\n          console.error(reason)\n          const serverError = reason.response?.data?.error\n          const message = serverError ?? `Data of ${name} has already been deleted from the server`;\n          notify({ message, state: NOTIFICATION_STATES.ERROR })\n          if (!serverError) {\n            const matchId = person => person.id !== id\n            const filteredPersons = persons.filter(matchId)\n            setPersons(filteredPersons)\n          }\n        })\n      }\n\n      return void clearFields()\n    }\n\n    create(newName, newNumber)\n      .then(newPerson => {\n        clearFields()\n        setPersons([...persons, newPerson])\n        notify({\n          message: `Added ${newPerson.name}`,\n          state: NOTIFICATION_STATES.SUCCESS,\n        })\n      })\n      .catch(({ response: { data : { error }} }) => {\n        notify({\n          message: error,\n          state: NOTIFICATION_STATES.ERROR,\n        })\n      })\n  }\n\n  const deletePerson = (personId, personName) => {\n    if (window.confirm(`Delete ${personName}?`)) {\n      remove(personId)\n        .then(() => {\n          notify({\n            message: `${personName} has been deleted`,\n            state: NOTIFICATION_STATES.SUCCESS,\n          })\n        })\n        .catch(error => {\n          console.error(error)\n          notify({\n            message: `${personName} is already deleted`,\n            state: NOTIFICATION_STATES.ERROR,\n          })\n        })\n        .finally(() => {\n          const matchId = ({ id }) => id !== personId\n          const filteredPersons = persons.filter(matchId)\n          setPersons(filteredPersons)\n        })\n    }\n  }\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notificationMessage} state={notificationState} />\n      <PersonsForm data={controlsData} handler={preventify(addPerson)} />\n      <h2>Numbers</h2>\n      <Control label=\"filter shown with\" value={criteria} handler={withValue(setCriteria)} />\n      <Persons criteria={criteria.toLowerCase()} persons={persons} deletePerson={deletePerson} />\n    </div>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}